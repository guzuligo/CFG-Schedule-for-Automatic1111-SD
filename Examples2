Other experimental ideas I was trying. CFG value might be useless in some:

0: cfg*(e>0.5)+cfg*    (3*(e%2<=0.5 and t%5<1) - 1*(t%5==2)) * (t<T-3)
0:e+e*(e<0.5)+(e%2<=0.5 and t%5<2 and t<T-3)*0.5



0: 5+ (  (t% math.floor((30+cfg)/2))==0)*10
0:  1/(1+cfg*e*e)



0:    40*(    ((t)%math.floor(5+cfg/8)  )==0) *2*e*(t<T-5)+ (31-cfg)*0.1
0: (    ((t)%math.floor(5+cfg/8)  )>x(e*2,0,1)   )*e*2+e*0.1 



0:    40*(    ((t)%math.floor(5+cfg/8)  )==0) *2*e*(t<T-5)+ (31-cfg)*0.1
0: (    ((t)%math.floor(5+cfg/8)  )>0)*e*2+e*0.1 



0:pow(cfg,0.5)+  5*(cfg/30)* (1-((t*0.2)%1))*(t%6<2)*(  (t%6==1)*3) + (31-cfg)*.05
0:5*((t%6)>0)*pow(e,2)+((t%6)<20)*2

0:2;3:1;5:=10-(t/T)*10; 25:=10+20*e
0:=60*d;3:0.5;  10:1;23:=2.4-(t/T)



0:1+(t%5 ==0 )*(15-d*5) ;13:10 ;20:5+e*5-d*2
0:20-min(0,t*3);13:0.5*e           ;20:1+e; 30:e*2



0:1+(t%4<1 )*95*e*e ;50:5+(t%4<1 )*5*e
0:(15-(t%4<1 )*14)*(1+e)



0:1+((t%4<1)*20+(t%5<1)*190)*e*e ;50:5+(t%5<1 )*4*e
0:(15-(t%5<1 )*14)*(1+e)



=2+50*(t%4<1)*e
=1/(1+t/T)


0:15; 2:(5*e+30*(t%3<1 and t<25)*e*e)   /(1+d)
0:5*e; 10:5*e*e


# changes show on all denoising strength
0: 6-( cfg/30*5 ) + (  (t% math.floor((32-cfg+d*4)/2))==0)*( pow(200,1-d/2)*e*e)
0:  e*0.2 if  (t% math.floor((36-cfg)/2))==0 else pow(e,1/(1/pow(2,  (cfg-15)/30*3  )   ))  

# Trying to force modification
0:( 1-pow(2*e-1 ,2))*cfg*(0.75+(t<T/5)) * (t%4<(1+(t<T/5)) and t<T-4)+(31-cfg)*0.25
0:pow(e,0.3)*(1+e*6*(t%8>3 and t%8<5 and t>T*.6 and t<T*.6+6)   )

#or
0:( 1-pow(2*e-1 ,2))*(cfg +pow((1-d)*6,2) )*(0.75+(t<T/5)) * (t%4<(1+(t<T/5)) and t<T-4)+(31-cfg)*0.25
0:pow(e,0.3)*(1+e*6*(t%8>3 and t%8<5+0*pow( (1-d)*10,2) and t>T*.6 and t<T*.6+6)   )


#The more CFG value, the stronger it drops.
0:(cfg+1)*(pow(cfg+1,e-1)-1/(cfg+1))/(cfg)*cfg+3
0:e




#Test for better img2img consistancy. Keep denoising at low level and try different CFG values
0:(1-e*.9)*cfg   + ( ((t%(2+(e>0.7)) <1)*1.1*cfg*(e+(e>0.3 and e<0.6)*0.2))    )*     (      2*( 1+pow(d,pow(2,1/(1+d))))-1     )
0:e+ (e>0.7 and t%2==0)*3  + (e<0.3 and t%2==1 and t<T-3)*1


#random idea
0:cfg if (t%2==0) else cfg*pow(e,pow(1-e,2))
0:(1-pow(e,pow(1-e,2)))*2
--
0:cfg/(8**(2*(1-e))) if t%2==0 else 0
--


#Very foreceful. Needs low deniosing
0:200/(t*0.4+1); 25:0.07;     37:cfg
0:0.3;           25:3;        37:max((3-(t-37)/10 ),e)

#Super forceful
0:(1100-d*1050)/(t*0.4+1);            25:0.07;           37:cfg+cfg*d*3
0:0.8-d*0.5;                              25:30-d*29;                      37:max((3-(t-37)/(10-10*d) ),e)
